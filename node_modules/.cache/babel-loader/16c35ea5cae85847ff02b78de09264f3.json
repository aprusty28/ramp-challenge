{"ast":null,"code":"var _jsxFileName = \"/Users/anu/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx\";\n// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={async (newValue) => {\n//           await consumerSetTransactionApproval({\n//             transactionId: transaction.id,\n//             newValue,\n//           })\n//           setApproved(newValue)\n//         }}\n//       />\n//     </div>\n//   )\n// }\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\nimport React from \"react\";\nimport { InputCheckbox } from \"./InputCheckbox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  let {\n    transaction,\n    loading,\n    setTransactionApproval\n  } = _ref;\n\n  const handleApprovalChange = async newValue => {\n    try {\n      // Update the approval status locally\n      setApproved(newValue); // Call setTransactionApproval to update approval status on server\n\n      await setTransactionApproval({\n        transactionId: transaction.id,\n        newValue\n      });\n    } catch (error) {\n      console.error(\"Error while updating approval status:\", error); // Handle error if needed\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: transaction.merchant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: transaction.approved // Use transaction.approved directly\n      ,\n      disabled: loading,\n      onChange: handleApprovalChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["React","InputCheckbox","TransactionPane","transaction","loading","setTransactionApproval","handleApprovalChange","newValue","setApproved","transactionId","id","error","console","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","approved","Intl","NumberFormat","style","currency"],"sources":["/Users/anu/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["// import { useState } from \"react\"\n// import { InputCheckbox } from \"../InputCheckbox\"\n// import { TransactionPaneComponent } from \"./types\"\n\n// export const TransactionPane: TransactionPaneComponent = ({\n//   transaction,\n//   loading,\n//   setTransactionApproval: consumerSetTransactionApproval,\n// }) => {\n//   const [approved, setApproved] = useState(transaction.approved)\n\n//   return (\n//     <div className=\"RampPane\">\n//       <div className=\"RampPane--content\">\n//         <p className=\"RampText\">{transaction.merchant} </p>\n//         <b>{moneyFormatter.format(transaction.amount)}</b>\n//         <p className=\"RampText--hushed RampText--s\">\n//           {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n//         </p>\n//       </div>\n//       <InputCheckbox\n//         id={transaction.id}\n//         checked={approved}\n//         disabled={loading}\n//         onChange={async (newValue) => {\n//           await consumerSetTransactionApproval({\n//             transactionId: transaction.id,\n//             newValue,\n//           })\n\n//           setApproved(newValue)\n//         }}\n//       />\n//     </div>\n//   )\n// }\n\n// const moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n//   style: \"currency\",\n//   currency: \"USD\",\n// })\n\nimport React from \"react\"\nimport { InputCheckbox } from \"./InputCheckbox\"\n\nexport const TransactionPane = ({ transaction, loading, setTransactionApproval }) => {\n  const handleApprovalChange = async (newValue) => {\n    try {\n      // Update the approval status locally\n      setApproved(newValue)\n\n      // Call setTransactionApproval to update approval status on server\n      await setTransactionApproval({ transactionId: transaction.id, newValue })\n    } catch (error) {\n      console.error(\"Error while updating approval status:\", error)\n      // Handle error if needed\n    }\n  }\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant}</p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={transaction.approved} // Use transaction.approved directly\n        disabled={loading}\n        onChange={handleApprovalChange}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,OAAO,MAAMC,eAAe,GAAG,QAAsD;EAAA,IAArD;IAAEC,WAAF;IAAeC,OAAf;IAAwBC;EAAxB,CAAqD;;EACnF,MAAMC,oBAAoB,GAAG,MAAOC,QAAP,IAAoB;IAC/C,IAAI;MACF;MACAC,WAAW,CAACD,QAAD,CAAX,CAFE,CAIF;;MACA,MAAMF,sBAAsB,CAAC;QAAEI,aAAa,EAAEN,WAAW,CAACO,EAA7B;QAAiCH;MAAjC,CAAD,CAA5B;IACD,CAND,CAME,OAAOI,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,uCAAd,EAAuDA,KAAvD,EADc,CAEd;IACD;EACF,CAXD;;EAaA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,UAAyBR,WAAW,CAACU;MAArC;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBZ,WAAW,CAACa,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGb,WAAW,CAACc,QAAZ,CAAqBC,SADxB,OACoCf,WAAW,CAACc,QAAZ,CAAqBE,QADzD,SACsEhB,WAAW,CAACiB,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEjB,WAAW,CAACO,EADlB;MAEE,OAAO,EAAEP,WAAW,CAACkB,QAFvB,CAEiC;MAFjC;MAGE,QAAQ,EAAEjB,OAHZ;MAIE,QAAQ,EAAEE;IAJZ;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD,CA/BM;KAAMJ,e;AAiCb,MAAMY,cAAc,GAAG,IAAIQ,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}