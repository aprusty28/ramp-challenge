{"ast":null,"code":"var _jsxFileName = \"/Users/anu/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]); // Initialize with an empty array\n\n  const [currentPage, setCurrentPage] = useState(1); // Track current page\n\n  const [totalPages, setTotalPages] = useState(1); // Total number of pages\n\n  useEffect(() => {\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      var _paginatedTransaction;\n\n      // Concatenate new transactions with existing ones\n      setAllTransactions(prevTransactions => [...prevTransactions, ...paginatedTransactions.data]); // Update total pages\n\n      setTotalPages(((_paginatedTransaction = paginatedTransactions.meta) === null || _paginatedTransaction === void 0 ? void 0 : _paginatedTransaction.totalPages) || 1);\n    }\n  }, [paginatedTransactions]);\n  const loadTransactions = useCallback(async page => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetch({\n      page\n    });\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadTransactions(1); // Load transactions for the first page when component mounts\n    }\n  }, [employeeUtils.loading, employees, loadTransactions]);\n\n  const handleViewMore = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prevPage => prevPage + 1);\n      loadTransactions(currentPage + 1); // Load transactions for the next page\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await transactionsByEmployeeUtils.fetchById(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), currentPage < totalPages && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: handleViewMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8ZyiPd9RJTBSKdS03AwXdHUItns=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","currentPage","setCurrentPage","totalPages","setTotalPages","prevTransactions","meta","loadTransactions","page","invalidateData","fetchAll","fetch","loading","handleViewMore","prevPage","item","value","id","label","firstName","lastName","newValue","fetchById"],"sources":["/Users/anu/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]) // Initialize with an empty array\n  const [currentPage, setCurrentPage] = useState<number>(1) // Track current page\n  const [totalPages, setTotalPages] = useState<number>(1) // Total number of pages\n\n  useEffect(() => {\n    if (paginatedTransactions?.data) {\n      // Concatenate new transactions with existing ones\n      setAllTransactions((prevTransactions) => [...prevTransactions, ...paginatedTransactions.data])\n      // Update total pages\n      setTotalPages(paginatedTransactions.meta?.totalPages || 1)\n    }\n  }, [paginatedTransactions])\n\n  const loadTransactions = useCallback(\n    async (page: number) => {\n      setIsLoading(true)\n      transactionsByEmployeeUtils.invalidateData()\n\n      await employeeUtils.fetchAll()\n      await paginatedTransactionsUtils.fetch({ page })\n\n      setIsLoading(false)\n    },\n    [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadTransactions(1) // Load transactions for the first page when component mounts\n    }\n  }, [employeeUtils.loading, employees, loadTransactions])\n\n  const handleViewMore = () => {\n    if (currentPage < totalPages) {\n      setCurrentPage((prevPage) => prevPage + 1)\n      loadTransactions(currentPage + 1) // Load transactions for the next page\n    }\n  }\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await transactionsByEmployeeUtils.fetchById(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={allTransactions} />\n          {currentPage < totalPages && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={handleViewMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}